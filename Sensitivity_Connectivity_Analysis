#Sentivity and connectivity analysis with quadrant plotting
#Read the stratified samples
data = read.csv("sysarch_sample.csv")

# Create cost function
get_cost = function(d1_1,d1_2,d1_3,d1_4,d4,d8,d9_a1_b2,d9_a2_b2,d9_a3_b2,d9_a4_b2,d10){
  # Get individual cost statistics
  # Decision 1: DS (integration)
  # Note: cost is independent for each ds alternative (i.e., they add)
  m1_1 = case_when(d1_1==1 ~ 100, TRUE ~ 0)
  m1_2 = case_when(d1_2==1 ~ 120, TRUE ~ 0)
  m1_3 = case_when(d1_3==1 ~ 300, TRUE ~ 0)
  m1_4 = case_when(d1_4==1 ~ 50, TRUE ~ 0)
  # Decision 4: SF (fleet)
  m4 = case_when(d4==0 ~ 50, d4==1 ~ 200, d4==2 ~ 300, TRUE ~ 0)
  # Decision 8: SF (coverage)
  m8 = case_when(d8==0 ~ 20, d8==1 ~ 100, d8==2 ~ 50)
  # Decision 9: ASN (infrastructure)
  # if any b2 then cost = 500, but if only b1 then cost = 0
  m9 = case_when((rowSums(data.frame(d9_a1_b2, d9_a2_b2, d9_a3_b2, d9_a4_b2), na.rm = TRUE)) == 0 ~ 0, TRUE ~ 500)
  # Decision 10: SF (routing)
  m10 = case_when(d10==0 ~ 50, d10==1 ~ 150, d10==2 ~ 100)
  
  # Compile cost statistics into single metric
  cost = m1_1 + m1_2 + m1_3 + m1_4 + m4 + m8 + m9 + m10
  # # rescale
  # max = 1620
  # min = 120
  # cost = 1 - (cost - min)/(max - min)
  return(cost)
}

# Create reliability function
get_reliability = function(d2,d7,d10){
  # Get individual reliability statistics 
  # Decision 2: SF (user matching)
  m2 = case_when(d2==0 ~ 0.95, d2==1 ~ 0.9, d2==2 ~ 0.93, TRUE ~ 1)
  # Decision 7: SF (matching algorithm)
  m7 = case_when(d7==0 ~ 0.96, d7==1 ~ 0.98, d7==2 ~ 0.97)
  # Decision 10: SF (routing)
  m10 = case_when(d10==0 ~ 0.98, d10==1 ~ 0.99, d10==2 ~ 0.975)
  
  # Compile reliability statistics into single metric
  reliability = m2 * m7 * m10
  # # rescale
  # max = 0.9702
  # min = 0.8424
  # reliability = (reliability - min)/(max - min)
  return(reliability)
}

# Ride Match Efficiency with inputs: d2 (user matching strategy) and d7 (matching algorithm)
get_ride_match = function(d2,d7){
  # Note: for the case where d2 = N/A (only Citi Bike chosen) - assume match efficiency = 0.8
  m2 = case_when(d2==0 ~ 0.82, d2==1 ~ 0.76, d2==2 ~ 0.88, TRUE ~ 0.8)
  m7 = case_when(d7==0 ~ 0, d7==1 ~ 0.03, d7==2 ~ 0.05)
  ride_match = m2 + m7
  # # rescale
  # max = 0.93
  # min = 0.76
  # ride_match = (ride_match - min)/(max - min)
  return(ride_match)
}

# Fleet Utilization with inputs: d4 (fleet size) and d8 (service coverage)
get_fleet = function(d4,d8){
  m4 = case_when(d4==0 ~ 0.58, d4==1 ~ 0.73, d4==2 ~ 0.81, TRUE ~ 0.8)
  m8 = case_when(d8==0 ~ 0, d8==1 ~ 0.07, d8==2 ~ 0.04)
  fleet = m4 + m8
  # # rescale
  # max = 0.88
  # min = 0.58
  # fleet = (fleet - min)/(max - min)
  return(fleet)
}

# Booking Latency with inputs: d2 (user matching strategy), d7 (matching algorithm), and d8 (service coverage)
get_latency = function(d2,d7,d8) {
  # Note: for the case where d2 = N/A (only Citi Bike chosen) - assume match time is 2 s
  m2 = case_when(d2==0 ~ 0.8, d2==1 ~ 1.5, d2==2 ~ 1, TRUE ~ 2)
  m7 = case_when(d7==0 ~ 1.2, d7==1 ~ 1, d7==2 ~ 0.5)
  m8 = case_when(d8==0 ~ 0.7, d8==1 ~ 1.1, d8==2 ~ 1.3)
  latency = m2 + m7 + m8
  # # rescale
  # max = 4.5
  # min = 2
  # latency = 1 - (latency - min)/(max - min)
  return(latency)
}

# # This code will add the metrics to the data set
data_with_metrics <- data %>%
  rowwise() %>%
  mutate(cost = get_cost(d1_1,d1_2,d1_3,d1_4,d4,d8,d9_a1_b2,d9_a2_b2,d9_a3_b2,d9_a4_b2,d10),
                reliability = get_reliability(d2,d7,d10),
               ride_match = get_ride_match(d2,d7),
               fleet = get_fleet(d4,d8),
               latency = get_latency(d2,d7,d8)
  )%>%
  ungroup()%>%
  select(everything()) 

data_with_metrics %>% glimpse()

# Calculate sensitivity and connectivity
data_with_metrics %>% summary()
points = expand_grid(
  decision = data %>% select(d1_1, d1_2, d1_3, d1_4,d4,d5, d6, d7,d8,d9_a1_b2) %>% names(),
  metric = c("cost", "reliability", "ride_match", "fleet", "latency")
  
) %>%
  group_by(decision, metric) %>%
  reframe(
    sensitivity = round(sensitivity(data = data_with_metrics, decision_i = decision, metric = metric),5),
    connectivity = round(connectivity(data = data_with_metrics, decision_i = decision, decisions = c("d1_1","d1_2","d1_3","d1_4",
                                                                                        # "d2",
                                                                                        # "d3",
                                                                                        #"d4",
                                                                                        "d5","d6","d7","d8","d9_a1_b2",
                                                                                        # "d9_a2_b1", "d9_a2_b2","d9_a3_b2","d9_a4_b2",
                                                                                        "d10"
                                                                                        ), metric = metric),5)
  )

points
write.csv(points, "Decision_Metrics_Sens_Conn.csv")

ggplot() +
  geom_point(data = points, mapping = aes(
    x = connectivity, y = sensitivity, color = decision),
    size = 5) +
  geom_text(data = points, mapping = aes(
    x = connectivity, y = sensitivity, label = decision), 
    color = "black",size = 2) +
  facet_wrap(~metric, scales = "free") +
  theme_minimal() +
  theme(legend.position = "right") +
  guides(color = guide_legend(title = "Decision"))

pointsm1 = points %>%
  filter(metric == "cost")

m1_plot = ggplot() +
  geom_point(data = pointsm1, mapping = aes(
    x = connectivity, y = sensitivity, color = decision),
    size = 5) +
  geom_text(data = pointsm1, mapping = aes(
    x = connectivity, y = sensitivity, label = decision), 
    color = "black",size = 2) +
  theme(legend.position = "none") +
  geom_vline(xintercept = 18) +
  geom_hline(yintercept = 50) +
  labs(x = "connectivity (cost)",
       y = "sensitivity (cost)")

m1_plot


# Filter for metric m3
pointsm2 = points %>%
  filter(metric == "ride_match")

# Create the plot for metric m3
m3_plot = ggplot() +
  geom_point(data = pointsm2, mapping = aes(
    x = connectivity, y = sensitivity, color = decision),
    size = 5) +
  geom_text(data = pointsm2, mapping = aes(
    x = connectivity, y = sensitivity, label = decision), 
    color = "black", size = 2) +
  theme(legend.position = "right") +
  geom_vline(xintercept = .003) +
  geom_hline(yintercept = .001) +
  labs(x = "connectivity (ride_match)",
       y = "sensitivity (ride_match)")

# Show both plots side by side
gridExtra::grid.arrange(m1_plot,m3_plot,  nrow = 1, ncol = 2)
